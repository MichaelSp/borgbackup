#!/usr/bin/env sh

KEY=${1}
CONFIG=$(cat)

[ -z "${KEY}" ] && echo "KEY is required" && exit 1
[ -z "${CONFIG}" ] && echo "CONFIG is required" && exit 1

set -e # exit on error
[ "${DEBUG}" = "true" ] && set -x

NAMESPACE=$(echo "${CONFIG}" | yq '.namespace')
INSTANCE_NAME=$(echo "${CONFIG}" | yq '.instanceName')

if [ ! "$(echo "${CONFIG}" | yq '.type')" = "mariadb" ]; then
  echo "ðŸ¤– Config for '${KEY}' is not of type 'mariadb'" >&2
  exit 1
fi

if [ -z "$INSTANCE_NAME" ] || [ -z "$NAMESPACE" ]; then
  echo "NAMESPACE and INSTANCE_NAME is required ðŸ’¥" >&2
  exit 1
fi

FILTER="app.kubernetes.io/name=mariadb,app.kubernetes.io/instance=${INSTANCE_NAME},app.kubernetes.io/component=primary"

POD_YAML=$(kubectl get statefulset -n "$NAMESPACE" -l "$FILTER" -o json)

# extract pod name
STATEFUL_SET_NAME=$(echo "${POD_YAML}" | yq '.items[0].metadata.name')
if [ -z "$STATEFUL_SET_NAME" ] || [ "$STATEFUL_SET_NAME" = "null" ]; then
  echo "ERROR: No StatefulSet found for 'app.kubernetes.io/instance=${INSTANCE_NAME}' in namespace '$NAMESPACE'" >&2
  exit 1
fi

# extract secret name
SECRET_NAME=$(echo "${POD_YAML}" | yq '.items[0].spec.template.spec.containers[0].env[] | select(.name == "MARIADB_ROOT_PASSWORD") | .valueFrom.secretKeyRef.name')
if [ -z "$SECRET_NAME" ]; then
  echo "ERROR: No secret found for '${INSTANCE_NAME}' in namespace '$NAMESPACE' - searching for an env var named 'MARIADB_ROOT_PASSWORD'" >&2
  exit 1
fi

MYSQL_PASSWORD=$(kubectl --context="${KUBECONTEXT}" get secrets -n "$NAMESPACE" "$SECRET_NAME" -o jsonpath='{.data.mariadb-root-password}' | base64 -d)
MYSQL_USER=root

cat <<EOF

read_special: "true"
mariadb_databases:
- name: all # all databases
  username: ${MYSQL_USER}
  password: ${MYSQL_PASSWORD}
  hostname: ${INSTANCE_NAME}-mariadb.${NAMESPACE}.svc.cluster.local

EOF
