#!/usr/bin/env sh

KEY=${1}
CONFIG=$(cat)

[ -z "${KEY}" ] && echo "KEY is required" && exit 1
[ -z "${CONFIG}" ] && echo "CONFIG is required" && exit 1

set -e # exit on error
[ "${DEBUG}" = "true" ] && set -x

NAMESPACE=$(echo "${CONFIG}" | yq '.namespace')
INSTANCE_NAME=$(echo "${CONFIG}" | yq '.instanceName')
DUMP_AS_ADMIN=$(echo "${CONFIG}" | yq '.use_postgres_admin // true')

if [ "$DUMP_AS_ADMIN" != "true" ] && [ "$DUMP_AS_ADMIN" != "false" ]; then
  echo "ðŸ¤– use_postgres_admin for '${KEY}' is not a boolean"
  exit 1
fi

if [ ! "$(echo "${CONFIG}" | yq '.type')" = "postgresql" ]; then
  echo "ðŸ¤– Config for '${KEY}' is not of type 'postgresql'" >&2
  exit 1
fi

if [ -z "$INSTANCE_NAME" ] || [ -z "$NAMESPACE" ]; then
  echo "NAMESPACE and INSTANCE_NAME is required ðŸ’¥" >&2
  exit 1
fi

FILTER="app.kubernetes.io/name=postgresql,app.kubernetes.io/instance=${INSTANCE_NAME},app.kubernetes.io/component=primary"

POD_YAML=$(kubectl get statefulset -n "$NAMESPACE" -l "$FILTER" -o json)

# extract pod name
STATEFUL_SET_NAME=$(echo "${POD_YAML}" | yq '.items[0].metadata.name')
if [ -z "$STATEFUL_SET_NAME" ] || [ "$STATEFUL_SET_NAME" = "null" ]; then
  echo "ERROR: No StatefulSet found for 'app.kubernetes.io/instance=${INSTANCE_NAME}' in namespace '$NAMESPACE'" >&2
  exit 1
fi

# extract secret name
SECRET_NAME=$(echo "${POD_YAML}" | yq '.items[0].spec.template.spec.containers[0].env[] | select(.name == "POSTGRES_PASSWORD") | .valueFrom.secretKeyRef.name')
if [ -z "$SECRET_NAME" ]; then
  echo "ERROR: No secret found for '${INSTANCE_NAME}' in namespace '$NAMESPACE' - searching for an env var named 'POSTGRES_PASSWORD'" >&2
  echo "spec: ${POD_YAML}" >&2
  exit 1
fi

SECRET_KEY='postgres-password'
if [ "$DUMP_AS_ADMIN" = false ]; then
  SECRET_KEY='password'
fi

PGPASSWORD=$(kubectl get secrets -n "$NAMESPACE" "$SECRET_NAME" -o jsonpath="{.data.${SECRET_KEY}}" | base64 -d)

if [ -z "$PGPASSWORD" ]; then
  echo "ERROR: No password found in secret '${SECRET_NAME}' in namespace '$NAMESPACE'"
  exit 1
fi

if [ "$DUMP_AS_ADMIN" = false ]; then
  # in case of error: failed: FATAL:  password authentication failed for user "<some-user>", comment out the following line
  PGUSER=$(echo "${POD_YAML}" | yq '.items[0].spec.template.spec.containers[0].env[] | select(.name == "POSTGRES_USER") | .value')
fi
#
# if use_postgres_admin is true or no user was found, use postgres user
if [ -z "$PGUSER" ]; then
  PGUSER="postgres"
fi

POSTGRES_DATABASE=$(echo "${POD_YAML}" | yq '.items[0].spec.template.spec.containers[0].env[] | select(.name == "POSTGRES_DATABASE") | .value')
if [ -z "$POSTGRES_DATABASE" ]; then
  POSTGRES_DATABASE="postgres"
fi

cat <<EOF

read_special: "true"
postgresql_databases:
- name: all # all databases
  username: ${PGUSER}
  password: ${PGPASSWORD}
  hostname: ${INSTANCE_NAME}-postgresql.${NAMESPACE}.svc.cluster.local

EOF