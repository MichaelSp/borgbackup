#!/usr/bin/env sh

. /app/lib.sh

KEY=${2}

set -e # exit on error

CONFIG=$(yq eval ".${KEY}" "${BACKUP_CONFIG_YAML}")

if [ "${CONFIG}" = "" ] || [ "${CONFIG}" = "null" ]; then
  echo "🤖 No config found for '${KEY}'"
  exit 1
fi
TYPE=$(echo "${CONFIG}" | yq eval '.type // env(DEFAULT_TYPE)' | tr '[:upper:]' '[:lower:]')

case "${TYPE}" in
  "postgresql")
    echo "🤖 PostgreSQL backup detected."
    /app/backup-postgresql "${KEY}"
    exit 0
    ;;
  "mariadb")
    echo "🤖 MariaDB backup detected."
    /app/backup-mariadb "${KEY}"
    exit 0
    ;;
esac

COMPRESSION=$(echo "${CONFIG}" | yq eval '.compression // env(DEFAULT_COMPRESSION)')
KEEP=$(echo "${CONFIG}" | yq eval '.keep // env(DEFAULT_KEEP)')
SRC=$(echo "${CONFIG}" | yq eval '.source // env(DEFAULT_SRC)')

if [ "${TYPE}" = "pvc" ]; then
  echo "🤖 PVC backup detected. Find PVC path"

  NS=$(echo "${SRC}" | cut -d'/' -f1)
  PVC=$(echo "${SRC}" | cut -d'/' -f2)
  PV=$(kubectl get pvc -n "${NS}" "${PVC}"  -o jsonpath='{.spec.volumeName}')
  SRC=$(kubectl get pv "${PV}" -o jsonpath='{.spec.local.path}')
  echo "🤖 PVC path is ${SRC}"
fi

echo "🧐 Check if the repo is initialized..."
if ! borg info > /dev/null 2>&1; then
  echo "🤖 Initializing borg repo..."
  borg init --encryption=repokey

  borg key export > "${BORG_SECURITY_DIR}/repokey"
  echo "🤖 store the repo-key passphrase in ${BORG_SECURITY_DIR}/repokey"
fi

echo "🤖 Running borg backup for '${KEY}' from '$SRC'"
DATE=$(date +%Y-%m-%d-%H-%M-%S)
borg create --stats --progress --compression "${COMPRESSION}" "${BORG_REPO}::${KEY}-${DATE}" "${SRC}"

echo "🤖 Pruning old backups..."
borg prune --list --keep-within "${KEEP}"